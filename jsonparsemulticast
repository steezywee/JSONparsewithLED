#include <WiFi.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>

const char* ssid = "SSID";        // Replace with your Wi-Fi SSID
const char* password = "password"; // Replace with your Wi-Fi password

WiFiUDP udp;
IPAddress multicastAddress(239, 255, 0, 1); // set Multicast IP address 
const unsigned int multicastPort = 12345;    // set Multicast port

const int ledPinSuccess = 2;  // GPIO for success LED
const int ledPinFailure = 4;  // GPIO for failure LED

void setup() {
  Serial.begin(115200);

  // Set LED pins as outputs
  pinMode(ledPinSuccess, OUTPUT);
  pinMode(ledPinFailure, OUTPUT);
  digitalWrite(ledPinSuccess, LOW); // Turn off initially
  digitalWrite(ledPinFailure, LOW); // Turn off initially

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to the WiFi network");

  // Print the IP address
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start UDP and join multicast group
  udp.beginMulticast(multicastAddress, multicastPort);
  Serial.println("Listening for multicast messages...");
}

void loop() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    // Receive the incoming UDP packet
    char incomingPacket[255];
    int len = udp.read(incomingPacket, 255);
    if (len > 0) {
      incomingPacket[len] = 0; // Null-terminate the string
    }
    Serial.println("Received UDP packet:");
    Serial.println(incomingPacket);

    // Parse the JSON data from the UDP packet
    StaticJsonDocument<200> jsonDoc;
    DeserializationError error = deserializeJson(jsonDoc, incomingPacket);

    if (error) {
      Serial.print("JSON Parsing failed: ");
      Serial.println(error.c_str());
      return;
    }

    // Extract values from the JSON
    const char* deviceId = jsonDoc["deviceId"];  // Get the deviceId (string)
    bool success = jsonDoc["success"];           // Get the success (boolean)

    // Print the parsed data
    Serial.println("Parsed JSON:");
    Serial.print("Device ID: ");
    Serial.println(deviceId);
    Serial.print("Success: ");
    Serial.println(success ? "true" : "false");

    // If deviceId matches and success is true, turn on the success LED for 2 seconds, set deviceId match in line below
    if (strcmp(deviceId, "kiosk_2") == 0) { 
      if (success) {
        Serial.println("Device ID matched and success is true. Turning on success LED for 2 seconds.");
        digitalWrite(ledPinSuccess, HIGH);   // Turn the success LED on
        delay(2000);                         // Wait for 2 seconds
        digitalWrite(ledPinSuccess, LOW);    // Turn the success LED off
      } else {
        Serial.println("Device ID matched and success is false. Turning on failure LED for 2 seconds.");
        digitalWrite(ledPinFailure, HIGH);   // Turn the failure LED on
        delay(2000);                         // Wait for 2 seconds
        digitalWrite(ledPinFailure, LOW);    // Turn the failure LED off
      }
    } else {
      Serial.println("Device ID did not match.");
    }
  }
}
