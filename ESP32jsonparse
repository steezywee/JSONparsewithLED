#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ArduinoJson.h>

const char* ssid = "SSID";        // Replace with your Wi-Fi SSID
const char* password = "PASSWORD"; // Replace with your Wi-Fi password

WebServer server(80);  // Create a web server object that listens on port 80

const int ledPin = 2;  // GPIO pin for the LED (you can change this to any other pin)

void setup() {
  Serial.begin(115200);

  // Set LED pin as an output
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Turn LED off initially

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to the WiFi network");

  // Print the IP address
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Define the handler function for when the ESP32 receives a POST request
  server.on("/json", HTTP_POST, handlePostJson);

  // Start the server
  server.begin();
  Serial.println("HTTP server started");
}

void handlePostJson() {
  if (server.hasArg("plain") == false) {
    server.send(400, "text/plain", "Body not received");
    return;
  }

  String body = server.arg("plain");
  Serial.println("Received JSON:");
  Serial.println(body);

  // Parse the JSON
  StaticJsonDocument<200> jsonDoc;
  DeserializationError error = deserializeJson(jsonDoc, body);

  if (error) {
    Serial.print("JSON Parsing failed: ");
    Serial.println(error.c_str());
    server.send(500, "application/json", "{\"status\":\"failed\", \"error\":\"Invalid JSON format\"}");
    return;
  }

  // Extract values from the JSON
  const char* deviceId = jsonDoc["deviceId"];  // Get the deviceId (string)
  const char* memberId = jsonDoc["memberId"];  // Get the memberId (string)
  bool success = jsonDoc["success"];           // Get the success (boolean)

  // Print the parsed data
  Serial.println("Parsed JSON:");
  Serial.print("Device ID: ");
  Serial.println(deviceId);
  Serial.print("Member ID: ");
  Serial.println(memberId);
  Serial.print("Success: ");
  Serial.println(success ? "true" : "false");

  // If success is true, turn on the LED for 2 seconds
  if (success) {
    Serial.println("Turning on LED for 2 seconds");
    digitalWrite(ledPin, HIGH);   // Turn the LED on
    delay(2000);                  // Wait for 2 seconds
    digitalWrite(ledPin, LOW);    // Turn the LED off
  }

  // Respond with a success message
  server.send(200, "application/json", "{\"status\":\"ok\"}");
}

void loop() {
  server.handleClient();  // Handle incoming clients
}
